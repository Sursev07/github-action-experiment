name: Check Confluence Release Plan Link

on:
  pull_request:
    branches:
      - main

jobs:
  check-confluence-link:
    runs-on: ubuntu-latest
    steps:
      - name: Check for Confluence Release Plan Link in PR Description
        id: link_check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the PR description
          DESCRIPTION=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.event.pull_request.url }}" | jq -r .body)

          # Get current date in YYYY-MM-DD format (e.g., 2024-10-29)
          CURRENT_DATE=$(date +'%Y-%m-%d')
          echo "Current Date: $CURRENT_DATE"

          # Extract Confluence link from PR description
          LINK=$(echo "$DESCRIPTION" | grep -o 'https://ajaib.atlassian.net/wiki/[^\"]*')
          
          # Validate the presence of the link
          if [[ -z "$LINK" ]]; then
            echo "::error::A Confluence release plan link with the domain https://ajaib.atlassian.net/wiki/ is missing in the PR description."
            exit 1  # Fail the action if the link is missing
          else
            echo "::set-output name=confluence_link::$LINK"
            echo "Found Confluence Link: $LINK"
          fi

          # Extract date in YYYY-MM-DD format from the link
          LINK_DATE=$(echo "$LINK" | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')

          # Verify the presence of a valid date in the link
          if [[ -z "$LINK_DATE" ]]; then
            echo "::error::No valid date found in the Confluence link."
            exit 1
          fi
          echo "Date in Link: $LINK_DATE"

          # Verify the date matches the current date
          if [[ "$LINK_DATE" != "$CURRENT_DATE" ]]; then
            echo "::error::The date in the Confluence link ($LINK_DATE) does not match the current date ($CURRENT_DATE)."
            exit 1
          fi

      - name: Validate Confluence Page Exists (No Auth)
        env:
          LINK: ${{ steps.link_check.outputs.confluence_link }}
        run: |
          echo "Checking Confluence Page Link: $LINK"
          
          # Check if the Confluence page exists without authentication
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L "$LINK")

          echo "HTTP Status Code: $STATUS_CODE"

          if [[ "$STATUS_CODE" -ne 200 ]]; then
            echo "::error::Confluence document not found or is not publicly accessible. Please check the link."
            exit 4
          else
            echo "Confluence document is accessible."
          fi